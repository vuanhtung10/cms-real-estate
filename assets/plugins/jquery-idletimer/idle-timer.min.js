/*! Idle Timer v1.1.0 2016-03-21 | https://github.com/thorst/jquery-idletimer | (c) 2016 Paul Irish | Licensed MIT */
!(function(a) {
  ;(a.idleTimer = function(b, c) {
    let d
    typeof b === 'object'
      ? ((d = b), (b = null))
      : typeof b === 'number' && ((d = { timeout: b }), (b = null)),
      (c = c || document),
      (d = a.extend(
        {
          idle: !1,
          timeout: 3e4,
          events:
            'mousemove keydown wheel DOMMouseScroll mousewheel mousedown touchstart touchmove MSPointerDown MSPointerMove'
        },
        d
      ))
    const e = a(c)
    let f = e.data('idleTimerObj') || {}
    const g = function(b) {
      const d = a.data(c, 'idleTimerObj') || {}
      ;(d.idle = !d.idle), (d.olddate = +new Date())
      const e = a.Event((d.idle ? 'idle' : 'active') + '.idleTimer')
      a(c).trigger(e, [c, a.extend({}, d), b])
    }
    const h = function(b) {
      const d = a.data(c, 'idleTimerObj') || {}
      if (
        (b.type !== 'storage' || b.originalEvent.key === d.timerSyncId) &&
        d.remaining == null
      ) {
        if (b.type === 'mousemove') {
          if (b.pageX === d.pageX && b.pageY === d.pageY) return
          if (typeof b.pageX === 'undefined' && typeof b.pageY === 'undefined')
            return
          const e = +new Date() - d.olddate
          if (e < 200) return
        }
        clearTimeout(d.tId),
          d.idle && g(b),
          (d.lastActive = +new Date()),
          (d.pageX = b.pageX),
          (d.pageY = b.pageY),
          b.type !== 'storage' &&
            d.timerSyncId &&
            typeof localStorage !== 'undefined' &&
            localStorage.setItem(d.timerSyncId, d.lastActive),
          (d.tId = setTimeout(g, d.timeout))
      }
    }
    const i = function() {
      const b = a.data(c, 'idleTimerObj') || {}
      ;(b.idle = b.idleBackup),
        (b.olddate = +new Date()),
        (b.lastActive = b.olddate),
        (b.remaining = null),
        clearTimeout(b.tId),
        b.idle || (b.tId = setTimeout(g, b.timeout))
    }
    const j = function() {
      const b = a.data(c, 'idleTimerObj') || {}
      b.remaining == null &&
        ((b.remaining = b.timeout - (+new Date() - b.olddate)),
        clearTimeout(b.tId))
    }
    const k = function() {
      const b = a.data(c, 'idleTimerObj') || {}
      b.remaining != null &&
        (b.idle || (b.tId = setTimeout(g, b.remaining)), (b.remaining = null))
    }
    const l = function() {
      const b = a.data(c, 'idleTimerObj') || {}
      clearTimeout(b.tId), e.removeData('idleTimerObj'), e.off('._idleTimer')
    }
    const m = function() {
      const b = a.data(c, 'idleTimerObj') || {}
      if (b.idle) return 0
      if (b.remaining != null) return b.remaining
      let d = b.timeout - (+new Date() - b.lastActive)
      return d < 0 && (d = 0), d
    }
    if (b === null && typeof f.idle !== 'undefined') return i(), e
    if (b === null);
    else {
      if (b !== null && typeof f.idle === 'undefined') return !1
      if (b === 'destroy') return l(), e
      if (b === 'pause') return j(), e
      if (b === 'resume') return k(), e
      if (b === 'reset') return i(), e
      if (b === 'getRemainingTime') return m()
      if (b === 'getElapsedTime') return +new Date() - f.olddate
      if (b === 'getLastActiveTime') return f.lastActive
      if (b === 'isIdle') return f.idle
    }
    return (
      e.on(a.trim((d.events + ' ').split(' ').join('._idleTimer ')), function(
        a
      ) {
        h(a)
      }),
      d.timerSyncId && a(window).bind('storage', h),
      (f = a.extend(
        {},
        {
          olddate: +new Date(),
          lastActive: +new Date(),
          idle: d.idle,
          idleBackup: d.idle,
          timeout: d.timeout,
          remaining: null,
          timerSyncId: d.timerSyncId,
          tId: null,
          pageX: null,
          pageY: null
        }
      )),
      f.idle || (f.tId = setTimeout(g, f.timeout)),
      a.data(c, 'idleTimerObj', f),
      e
    )
  }),
    (a.fn.idleTimer = function(b) {
      return this[0] ? a.idleTimer(b, this[0]) : this
    })
})(jQuery)
