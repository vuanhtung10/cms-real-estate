;+(function(a) {
  'use strict'
  function c(c) {
    return this.each(function() {
      const d = a(this)
      let e = d.data('multiselectsplitter')
      const f = typeof c === 'object' && c
      ;(e || c != 'destroy') &&
        (e || d.data('multiselectsplitter', (e = new b(this, f))),
        typeof c === 'string' && e[c]())
    })
  }
  var b = function(a, b) {
    this.init('multiselectsplitter', a, b)
  }
  ;(b.DEFAULTS = {
    selectSize: null,
    maxSelectSize: null,
    clearOnFirstChange: !1,
    onlySameGroup: !1,
    groupCounter: !1,
    maximumSelected: null,
    afterInitialize: null,
    maximumAlert(a) {
      alert('Only ' + a + ' values can be selected')
    },
    createFirstSelect(a, b) {
      return '<option>' + a + '</option>'
    },
    createSecondSelect(a, b) {
      return '<option>' + a + '</option>'
    },
    template:
      '<div class="row" data-multiselectsplitter-wrapper-selector><div class="col-xs-6 col-sm-6"><select class="form-control" data-multiselectsplitter-firstselect-selector></select></div> <!-- Add the extra clearfix for only the required viewport --><div class="col-xs-6 col-sm-6"><select class="form-control" data-multiselectsplitter-secondselect-selector></select></div></div>'
  }),
    (b.prototype.init = function(c, d, e) {
      const f = this
      ;(f.type = c),
        (f.last$ElementSelected = []),
        (f.initialized = !1),
        (f.$element = a(d)),
        f.$element.hide(),
        (f.options = a.extend({}, b.DEFAULTS, e)),
        f.$element.after(f.options.template),
        (f.$wrapper = f.$element.next(
          'div[data-multiselectsplitter-wrapper-selector]'
        )),
        (f.$firstSelect = a(
          'select[data-multiselectsplitter-firstselect-selector]',
          f.$wrapper
        )),
        (f.$secondSelect = a(
          'select[data-multiselectsplitter-secondselect-selector]',
          f.$wrapper
        ))
      let g = 0
      let h = 0
      if (f.$element.find('optgroup').length != 0) {
        f.$element.find('optgroup').each(function() {
          const b = a(this).attr('label')
          const c = a(f.options.createFirstSelect(b, f.$element))
          c.val(b),
            c.attr('data-current-label', c.text()),
            f.$firstSelect.append(c)
          const d = a(this).find('option').length
          d > h && (h = d), g++
        })
        let i = Math.max(g, h)
        ;(i = Math.min(i, 10)),
          f.options.selectSize
            ? (i = f.options.selectSize)
            : f.options.maxSelectSize &&
              (i = Math.min(i, f.options.maxSelectSize)),
          f.$firstSelect.attr('size', i),
          f.$secondSelect.attr('size', i),
          f.$element.attr('multiple') &&
            f.$secondSelect.attr('multiple', 'multiple'),
          f.$element.is(':disabled') && f.disable(),
          f.$firstSelect.on('change', a.proxy(f.updateParentCategory, f)),
          f.$secondSelect.on('click change', a.proxy(f.updateChildCategory, f)),
          (f.update = function() {
            if (!(f.$element.find('option').length < 1)) {
              let b
              const a = f.$element.find('option:selected:first')
              ;(b = a.length
                ? a.parent().attr('label')
                : f.$element
                    .find('option:first')
                    .parent()
                    .attr('label')),
                f.$firstSelect
                  .find('option[value="' + b + '"]')
                  .prop('selected', !0),
                f.$firstSelect.trigger('change')
            }
          }),
          f.update(),
          (f.initialized = !0),
          f.options.afterInitialize &&
            f.options.afterInitialize(f.$firstSelect, f.$secondSelect)
      }
    }),
    (b.prototype.disable = function() {
      this.$secondSelect.prop('disabled', !0),
        this.$firstSelect.prop('disabled', !0)
    }),
    (b.prototype.enable = function() {
      this.$secondSelect.prop('disabled', !1),
        this.$firstSelect.prop('disabled', !1)
    }),
    (b.prototype.createSecondSelect = function() {
      const b = this
      b.$secondSelect.empty(),
        a.each(
          b.$element.find(
            'optgroup[label="' + b.$firstSelect.val() + '"] option'
          ),
          function(c, d) {
            const e = a(this).val()
            const f = a(this).text()
            const g = a(b.options.createSecondSelect(f, b.$firstSelect))
            g.val(e),
              a.each(b.$element.find('option:selected'), function(b, c) {
                a(c).val() == e && g.prop('selected', !0)
              }),
              b.$secondSelect.append(g)
          }
        )
    }),
    (b.prototype.updateParentCategory = function() {
      const a = this
      ;(a.last$ElementSelected = a.$element.find('option:selected')),
        a.options.clearOnFirstChange &&
          a.initialized &&
          a.$element.find('option:selected').prop('selected', !1),
        a.createSecondSelect(),
        a.checkSelected(),
        a.updateCounter()
    }),
    (b.prototype.updateCounter = function() {
      const b = this
      b.$element.attr('multiple') &&
        b.options.groupCounter &&
        a.each(b.$firstSelect.find('option'), function(c, d) {
          const e = a(d).val()
          let f = a(d).data('currentLabel')
          const g = b.$element.find(
            'optgroup[label="' + e + '"] option:selected'
          ).length
          g > 0 && (f += ' (' + g + ')'), a(d).html(f)
        })
    }),
    (b.prototype.checkSelected = function() {
      const b = this
      if (b.$element.attr('multiple') && b.options.maximumSelected) {
        let c = 0
        if (
          ((c =
            typeof b.options.maximumSelected === 'function'
              ? b.options.maximumSelected(b.$firstSelect, b.$secondSelect)
              : b.options.maximumSelected),
          !(c < 1))
        ) {
          const d = b.$element.find('option:selected')
          if (d.length > c) {
            b.$firstSelect.find('option:selected').prop('selected', !1),
              b.$secondSelect.find('option:selected').prop('selected', !1),
              b.initialized
                ? (b.$element.find('option:selected').prop('selected', !1),
                  b.last$ElementSelected.prop('selected', !0))
                : a.each(b.$element.find('option:selected'), function(b, d) {
                    b > c - 1 && a(d).prop('selected', !1)
                  })
            const e = b.last$ElementSelected
              .first()
              .parent()
              .attr('label')
            b.$firstSelect
              .find('option[value="' + e + '"]')
              .prop('selected', !0),
              b.createSecondSelect(),
              b.options.maximumAlert(c)
          }
        }
      }
    }),
    (b.prototype.basicUpdateChildCategory = function(b, c) {
      const d = this
      d.last$ElementSelected = d.$element.find('option:selected')
      let e = d.$secondSelect.val()
      a.isArray(e) || (e = [e])
      const f = d.$firstSelect.val()
      let g = !1
      d.$element.attr('multiple')
        ? d.options.onlySameGroup
          ? a.each(d.$element.find('option:selected'), function(b, c) {
              if (
                a(c)
                  .parent()
                  .attr('label') != f
              )
                return (g = !0), !1
            })
          : c || (g = !0)
        : (g = !0),
        g
          ? d.$element.find('option:selected').prop('selected', !1)
          : a.each(d.$element.find('option:selected'), function(b, c) {
              f ==
                a(c)
                  .parent()
                  .attr('label') &&
                a.inArray(a(c).val(), e) == -1 &&
                a(c).prop('selected', !1)
            }),
        a.each(e, function(a, b) {
          d.$element.find('option[value="' + b + '"]').prop('selected', !0)
        }),
        d.checkSelected(),
        d.updateCounter(),
        d.$element.trigger('change')
    }),
    (b.prototype.updateChildCategory = function(b) {
      b.type == 'change'
        ? (this.timeOut = setTimeout(
            a.proxy(function() {
              this.basicUpdateChildCategory(b, b.ctrlKey)
            }, this),
            10
          ))
        : b.type == 'click' &&
          (clearTimeout(this.timeOut),
          this.basicUpdateChildCategory(b, b.ctrlKey))
    }),
    (b.prototype.destroy = function() {
      this.$wrapper.remove(),
        this.$element.removeData(this.type),
        this.$element.show()
    }),
    (a.fn.multiselectsplitter = c),
    (a.fn.multiselectsplitter.Constructor = b),
    (a.fn.multiselectsplitter.VERSION = '1.0.1')
})(jQuery)
